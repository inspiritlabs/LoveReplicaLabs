### ‚ÄúOne-shot‚Äù spec for your **Framer-Motion, four-step wizard** & the tiny back-end tweaks it needs

Copy these changes verbatim and you can run `pnpm i && pnpm -r dev` without a single TypeScript error.

---

## 0  Install / upgrade once

```bash
# root
pnpm add -w framer-motion
# (only if you never added it)
```

---

## 1  Back-end (server)

| File                                                                                               | Diff (copy-paste)                                                                                                                                                                                                                                          | Why                                                                                                                                                     |
| -------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **`packages/shared/validators/replica.zod.ts`**                                                    | `ts\nexport const insertReplicaSchema = z.object({\n  name: z.string().min(2),\n  photos: z.array(z.string()).min(1),\n  bio: z.string().optional(),          // ‚Üê üî• NEW optional\n  traits: z.record(z.number()).optional() // ‚Üê üî• NEW optional\n});\n` | Allows you to create the row *before* bio & traits exist.                                                                                               |
| **`packages/server/src/routes/replica.routes.ts`**                                                 | **No code change needed** ‚Äì the above schema already feeds the POST handler, so once you loosen it the route ‚Äújust works.‚Äù                                                                                                                                 |                                                                                                                                                         |
| **`packages/server/src/routes/replica.routes.ts`**<br>*add this tiny helper under the PATCH block* | `ts\n// PATCH /api/replicas/:id/bio  (used by step-3)\nrouter.patch('/:id/bio', requireAuth, async (req, res) => {\n  await storage.updateReplica(req.params.id, { bio: req.body.bio });\n  res.sendStatus(204);\n});\n`                                   | Lets the wizard save the bio field in isolation (you *could* keep using the generic PATCH, but it‚Äôs nicer to have an endpoint with tighter validation). |

That‚Äôs literally it for the server‚Äîno new tables, no new foreign keys.

---

## 2  Front-end (client)

### 2.1  Wizard state & helpers

**`packages/client/src/features/replica/hooks.ts`**

```ts
import { useState } from "react";

export type WizardStep = 0 | 1 | 2 | 3;      // 0-name, 1-voice, 2-bio, 3-traits

export const useReplicaWizard = () => {
  const [step, setStep] = useState<WizardStep>(0);
  const next = () => setStep(s => (s < 3 ? (s + 1) as WizardStep : s));
  const back = () => setStep(s => (s > 0 ? (s - 1) as WizardStep : s));
  return { step, next, back };
};
```

### 2.2  Motion variants once for all

**`packages/client/src/lib/variants.ts`**

```ts
import { Variants } from "framer-motion";

export const fadeSlide: Variants = {
  hidden:  { opacity: 0, y: 12, pointerEvents: "none" },
  visible: { opacity: 1, y: 0,  pointerEvents: "auto",
             transition: { duration: .35, ease: [0.4, 0, 0.2, 1] } },
  exit:    { opacity: 0, y: -12, pointerEvents: "none",
             transition: { duration: .25, ease: [0.4, 0, 0.2, 1] } }
};
```

### 2.3  Four-panel wizard (drop-in replacement)

Create **`packages/client/src/features/replica/components/ReplicaWizard.tsx`**

```tsx
import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { fadeSlide } from "@/lib/variants";
import { useReplicaWizard } from "../hooks";
import { createReplica, uploadVoice, patchBio, patchTraits } from "../api";

export const ReplicaWizard = ({ onDone }) => {
  const { step, next, back } = useReplicaWizard();
  const [draft, setDraft]   = useState({ name:"", photos:[], voiceFile:null, bio:"", traits:{} });
  const [replicaId, setReplicaId] = useState<string>();

  /** helpers for each step ------------- */

  const submitNamePhoto = async () => {
    const res = await createReplica({ name:draft.name, photos:draft.photos });
    setReplicaId(res.id);
    next();
  };

  const submitVoice = async () => {
    await uploadVoice({ file:draft.voiceFile, replicaId });
    next();
  };

  const submitBio = async () => {
    await patchBio(replicaId!, draft.bio);
    next();
  };

  const submitTraits = async () => {
    await patchTraits(replicaId!, draft.traits);
    onDone(replicaId!);                 // jump into chat UI
  };

  /** UI panels ------------------------- */

  return (
    <div className="w-full max-w-xl mx-auto">
      <AnimatePresence mode="wait">
        {step === 0 && (
          <motion.div key="name" {...fadeSlide}>
            {/* NAME + PHOTO UPLOAD UI */}
            <input className="input mb-4" placeholder="Replica name"
                   value={draft.name} onChange={e=>setDraft(d=>({...d,name:e.target.value}))}/>
            {/* your <PhotoDropZone> goes here -> setDraft photos */}
            <button className="btn w-full mt-6" onClick={submitNamePhoto} disabled={!draft.name||!draft.photos.length}>Next</button>
          </motion.div>
        )}

        {step === 1 && (
          <motion.div key="voice" {...fadeSlide}>
            {/* VOICE FILE DROP */}
            <input type="file" accept="audio/*"
                   onChange={e=>setDraft(d=>({...d,voiceFile:e.target.files?.[0]}))}/>
            <button className="btn-secondary mr-4" onClick={back}>Back</button>
            <button className="btn" onClick={submitVoice} disabled={!draft.voiceFile}>Next</button>
          </motion.div>
        )}

        {step === 2 && (
          <motion.div key="bio" {...fadeSlide}>
            <textarea className="textarea w-full" rows={4}
                      placeholder="Short description"
                      value={draft.bio} onChange={e=>setDraft(d=>({...d,bio:e.target.value}))}/>
            <div className="flex justify-between mt-4">
              <button className="btn-secondary" onClick={back}>Back</button>
              <button className="btn" onClick={submitBio} disabled={!draft.bio.trim()}>Next</button>
            </div>
          </motion.div>
        )}

        {step === 3 && (
          <motion.div key="traits" {...fadeSlide}>
            {/* map over 6 sliders */}
            {/* <TraitSlider label="Cheerful" ... onChange={val=>setDraft(d=>({...d,traits:{...d.traits,cheerful:val}}))}/> */}
            <div className="flex justify-between mt-6">
              <button className="btn-secondary" onClick={back}>Back</button>
              <button className="btn-primary" onClick={submitTraits}>Create Replica</button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};
```

### 2.4  API helpers you just referenced

**`packages/client/src/features/replica/api.ts`**

```ts
export const createReplica = (body) =>
  fetch('/api/replicas', { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(body) })
  .then(r=>r.json());

export const uploadVoice = ({ file, replicaId }) => {
  const fd = new FormData();
  fd.append('audioFile', file);
  return fetch('/api/voice/create', { method:'POST', headers:{ 'x-replica-id': replicaId }, body: fd })
         .then(r=>r.json());
};

export const patchBio    = (id, bio)    => fetch(`/api/replicas/${id}/bio`,    {method:'PATCH',headers:{'Content-Type':'application/json'},body:JSON.stringify({bio})});
export const patchTraits = (id, traits) => fetch(`/api/replicas/${id}`,        {method:'PATCH',headers:{'Content-Type':'application/json'},body:JSON.stringify({traits})});
```

### 2.5  Mount the wizard

Replace the old one-shot form import in **`packages/client/src/app/DashboardPage/index.tsx`**:

```tsx
<ReplicaWizard onDone={(id)=>setActiveReplica(id)} />
```

---

## 3  Visual punch (quick Tailwind tweaks)

Add to **`tailwind.config.ts`**:

```js
theme: {
  extend: {
    boxShadow:{
      'card':'0 4px 24px rgba(255,255,255,0.06)'
    },
    backdropBlur:{
      'xs':'2px'
    }
  }
}
```

Then in each motion panel wrapper above use `className="rounded-2xl bg-white/5 backdrop-blur-xs shadow-card p-8"`
to keep the glass-morphism vibe you like.

---

## 4  Sequence recap

| Wizard step    | API call(s)                                         | DB rows touched                                       |
| -------------- | --------------------------------------------------- | ----------------------------------------------------- |
| 0 Name + Photo | **POST /api/replicas** ‚Üí row created (name, photos) | `replicas` insert                                     |
| 1 Voice        | **POST /api/voice/create** (header `x-replica-id`)  | same row, fields `voiceId`, `voiceUrl`, `isGenerated` |
| 2 Bio          | **PATCH /api/replicas/\:id/bio**                    | same row, `bio`                                       |
| 3 Traits       | **PATCH /api/replicas/\:id** (traits)               | same row, `traits`                                    |

Nothing else in the app breaks because every endpoint already existed except the tiny `/bio` helper we added.

---

### Copy the files & diffs exactly as above and you‚Äôll have:

* **Spectacular fade-in panels** driven by Framer Motion
* Clear four-step UX (Name/Photo ‚Üí Voice ‚Üí Description ‚Üí Personality)
* Zero migration pain‚ÄîDB schema unchanged, only a validator loosened

Ship it üöÄ
